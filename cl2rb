#!/usr/bin/env ruby

require 'sxp'
require 'pp'
require_relative 'translator'

  require 'readline'
  require 'mathn'
  require_relative 'cl'
  include CL

def _main
  program = SXP::Reader::CommonLisp.read_all(ARGF.read)

  puts "require 'mathn'"
  # puts "require 'cl'"
  # puts "require_relative 'cl'"

  puts File.read('translator.rb')
  puts File.read('cl.rb')

  puts 'include CL'
  puts '# --------------------------------'

  translator = Translator.new
  program.each do |sexp|
    # io = StringIO.new
    # PP.pp(sexp, io)
    # puts io.string
    # puts

    puts translator.translate(sexp)
    puts
  end
end

def main
  $translator = Translator.new
  $global_scope = binding

  if ARGV.delete("-t") == "-t"
    _main
  elsif ARGV.delete("-l") == "-l"
    filename = ARGV[0]
    ARGV.clear
    CL.load(filename)
    repl
  else
    repl
  end
end


RECORD_HISTORY = true

def repl
  prompt = "> "
  buf = ""
  while line = Readline.readline(prompt, RECORD_HISTORY)
    buf += line
    begin
      sexp = SXP::Reader::CommonLisp.read(buf)
      buf = ""
      prompt = "> "
    rescue  SXP::Reader::EOF
      prompt = "*   "
      next
    end
    rb = $translator.translate(sexp)
    value = Kernel.eval(rb, $global_scope)
    puts
    p value
  end
  puts "\nBye."
end

if __FILE__ == $0
  main
end
